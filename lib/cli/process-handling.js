/*
 * tavern
 * https://github.com/JoshuaWise/tavern
 *
 * Copyright (c) 2015 Joshua Wise, contributors
 * Licensed under the MIT license.
 * https://github.com/JoshuaWise/tavern/LICENSE
 */

'use strict';
var path = require('path');
var fs = require('fs');
var spawnSync = require('child_process').spawnSync;
var shellParser = require('node-shell-parser');

exports.serverIsRunning = function (tavernDir) {
	var latestInfo = getLatestProcessInfo(tavernDir);
	var runningInfo = getRunningProcessInfo(latestInfo.pid);
	return processesAreSame(latestInfo, runningInfo);
};

exports.terminateServer = function (tavernDir, force) {
	var latestInfo = getLatestProcessInfo(tavernDir);
	var runningInfo = getRunningProcessInfo(latestInfo.pid);
	return processesAreSame(latestInfo, runningInfo) && killProcess(latestInfo.pid, force);
};

exports.whenServerIsClosed = function (tavernDir, callback) {
	function check() {
		if (exports.serverIsRunning(tavernDir)) setTimeout(check, 10);
		else callback();
	}
	setTimeout(check, 10);
};

exports.writePID = function (tavernDir, pid) {
	var runningInfo = getRunningProcessInfo(pid);
	if (runningInfo.pid == null) {
		console.error('ERROR:\n',
					  'Could not retrieve process info of newly started Tavern process.\n',
					  'Please contact the Tavern project author or maintainer.');
	} else {
		fs.writeFileSync(getPIDPath(tavernDir), [
			'DO NOT EDIT THIS FILE.',
			runningInfo.pid,
			runningInfo.start,
			''
		].join('\n'));
	}
};

function killProcess(pid, force) {
	try {
		if (!validPID(pid)) {throw 0;}
		process.kill(pid, force ? 'SIGKILL' : 'SIGTERM');
		return true;
	} catch (err) {
		return false;
	}
}

function getLatestProcessInfo(tavernDir) {
	var pidPath = getPIDPath(tavernDir);
	try {
		var lines = fs.readFileSync(pidPath).toString().split('\n');
		var pid = +lines[1];
		var start = lines[2];
	} catch (err) {
		return null;
	}
	return validPID(pid)
		 ? {pid: pid, start: start}
		 : {pid: null};
}

function getRunningProcessInfo(pid) {
	if (!validPID(pid)) {
		return {pid: null};
	}
	var data = spawnSync('ps', ['-a', '-x', '-o', 'pid=pid', '-o', 'lstart=start'], {
		encoding: 'utf8',
		uid: process.getuid(),
		gid: process.getgid()
	});
	if (data.error || data.status) {
		console.error('ERROR:\n',
					  'There was a problem with the ps command. If ps is not installed, install it.\n',
					  'Otherwise, please contact the project maintainer.');
		throw data.error || data.stderr;
	}
	return shellParser(data.stdout).filter(function (row) {
		row.pid = +row.pid;
		return row.pid === pid;
	})[0] || {pid: null};
}

function processesAreSame(a, b) {
	return validPID(a.pid)
		&& a.pid === b.pid
		&& a.start === b.start;
}

function validPID(pid) {
	return Number.isFinite(pid)
		&& pid > 0
		&& ~~pid === pid;
}

function getPIDPath(tavernDir) {
	return path.join(tavernDir, '.pid');
}